#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

#1. How many orders were placed in January? 
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

#2. How many of those orders were for an iPhone? 
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6 
AND orderid <> 'Order ID'

#3. Select the customer account numbers for all the orders that were placed in February. 
SELECT distinct acctnum
FROM BIT_DB.customers cust

INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

#4. Which product was the cheapest one sold in January, and what was the price? 
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE  price in (SELECT min(price) FROM BIT_DB.JanSales)
#OR 
SELECT distinct product, price FROM BIT_DB.JanSales 
ORDER BY price ASC LIMIT 1

#5. What is the total revenue for each product sold in January?
SELECT sum(quantity)*price as revenue
,product
FROM BIT_DB.JanSales
GROUP BY product

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
select 
sum(Quantity), 
product, 
sum(quantity)*price as revenue
FROM BIT_DB.FebSales 
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers? 
select 
count(distinct cust.acctnum), 
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6 
AND orderid <> 'Order ID'

#8. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product

/*Which locations in New York received at least 3 orders in January, and how many orders did they each receive? */
SELECT *,count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID) > 2;

/*How many of each type of headphone were sold in February?*/
SELECT sum(Quantity) as quantity, Product
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphones%'
GROUP BY Product;

/*What was the average amount spent per account in February?*/
SELECT avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*What was the average quantity of products purchased per account in February?*/
SELECT sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID';

/*Which product brought in the most revenue in January and how much revenue did it bring in total?*/
SELECT product, sum(quantity*price) AS total_revenue
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY total_revenue desc 
LIMIT 1

SELECT * FROM BIT_DB.Spotifydata;
/*What is the average danceability by artist and track? */
SELECT artist_name, track_name, AVG(danceability) as avg_danceability
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

/*Who are the top 10 artists based on popularity? */
SELECT artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;
/*What artist released the longest song? */
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY duration_ms DESC
LIMIT 1;
/*What's the average danceability for the 10 most popular songs? STILL NEED TO FIGURE OUT*/
SELECT AVG(danceability) as avg
FROM BIT_DB.Spotifydata
WHERE popularity >= 92
ORDER BY popularity DESC
limit 10;
SELECT * FROM BIT_DB.Spotifydata;
/*Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.*/

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
Let's say you work as a data analyst for your city, and your boss wants a list of all the bike lanes that have an average safety rating of 4.0 or higher. She also wants to see the average safety rating for each of those bike lanes, and a label that says "Safe Lane".
WITH safety_average_cte AS (
    SELECT street, AVG(safetyrating) as 'rating'
    FROM CityBikeLanes
    GROUP BY street
)
SELECT street, rating, "Safe Lane" as tag
FROM safety_average_cte
WHERE rating > 4;

Now we can work on giving our boss what they asked for: a list of all the bike lanes, both safety ratings for each lane, the average safety rating for each lane, and a label with the recommendation as "Remove", "Leave As-Is", or "Improvements Needed".
SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
CASE WHEN AVG(safetyrating) OVER (PARTITION BY street) >=4 THEN "Leave As-Is"
    WHEN AVG(safetyrating) OVER (PARTITION BY street) <2.5 THEN "Remove"
    ELSE "Improvements Needed"
    END AS "Recommendation"
FROM CityBikeLanes
